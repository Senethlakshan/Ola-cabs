<UserControl x:Class="Ola_cabs.UserControl3"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:hc="https://handyorg.github.io/handycontrol" 
             xmlns:local="clr-namespace:Ola_cabs"
             mc:Ignorable="d" 
             d:DesignHeight="534" d:DesignWidth="822">
    <UserControl.Resources>
        <Style x:Key="RadioButtonStyle4" TargetType="{x:Type RadioButton}">
            <Setter Property="FocusVisualStyle">
                <Setter.Value>
                    <Style>
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="-4" Opacity="0.6" RadiusY="4" RadiusX="4" SnapsToDevicePixels="True" Stroke="{DynamicResource SecondaryBorderBrush}" StrokeThickness="2" StrokeDashArray="1 1"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="6,0,0,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="StoryboardCheckedFalse">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="StoryboardCheckedTrue">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Height="18" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="18">
                                <Ellipse x:Name="optionMark" Fill="White" MinWidth="6" MinHeight="6" RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                        </TransformGroup>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Left" Height="134" RadiusY="17" RadiusX="17" StrokeThickness="6" VerticalAlignment="Top" Width="119" Margin="-2.5,-36,-9,-66.5" Fill="White"/>
                            <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Left" Height="103.5" RadiusY="0" RadiusX="0" StrokeThickness="6" VerticalAlignment="Top" Width="107.5" Margin="0,-21.5,0,-50.5">
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="taxi (1).png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasContent" Value="True">
                                <Setter Property="Visibility" TargetName="contentPresenter" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsChecked" Value="True"/>
                                    <Condition Property="IsPressed" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Opacity" Value="0.8"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsChecked" Value="False"/>
                                    <Condition Property="IsPressed" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
                            </MultiTrigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkPrimaryBrush}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.4"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.BasedOn>
                <Style TargetType="{x:Type Control}">
                    <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                    <Setter Property="FontSize" Value="12"/>
                    <Setter Property="FocusVisualStyle">
                        <Setter.Value>
                            <Style>
                                <Setter Property="Control.Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <Rectangle RadiusY="4" RadiusX="4">
                                                <Rectangle.Style>
                                                    <Style TargetType="{x:Type Rectangle}">
                                                        <Setter Property="Margin" Value="-2"/>
                                                        <Setter Property="Opacity" Value="0.6"/>
                                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                        <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                        <Setter Property="StrokeThickness" Value="2"/>
                                                        <Setter Property="StrokeDashArray" Value="1 1"/>
                                                    </Style>
                                                </Rectangle.Style>
                                            </Rectangle>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Style.BasedOn>
        </Style>
        <Style x:Key="RadioButtonStyle5" TargetType="{x:Type RadioButton}">
            <Setter Property="FocusVisualStyle">
                <Setter.Value>
                    <Style>
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="-4" Opacity="0.6" RadiusY="4" RadiusX="4" SnapsToDevicePixels="True" Stroke="{DynamicResource SecondaryBorderBrush}" StrokeThickness="2" StrokeDashArray="1 1"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="6,0,0,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="StoryboardCheckedFalse">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="StoryboardCheckedTrue">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Height="18" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="18">
                                <Ellipse x:Name="optionMark" Fill="White" MinWidth="6" MinHeight="6" RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                        </TransformGroup>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Left" Height="134" RadiusY="17" RadiusX="17" StrokeThickness="6" VerticalAlignment="Top" Width="119" Margin="-2.5,-36,-9,-66.5" Fill="White"/>
                            <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Left" Height="103.5" RadiusY="0" RadiusX="0" StrokeThickness="6" VerticalAlignment="Top" Width="107.5" Margin="0,-21.5,0,-50.5">
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="van.png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasContent" Value="True">
                                <Setter Property="Visibility" TargetName="contentPresenter" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsChecked" Value="True"/>
                                    <Condition Property="IsPressed" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Opacity" Value="0.8"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsChecked" Value="False"/>
                                    <Condition Property="IsPressed" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
                            </MultiTrigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkPrimaryBrush}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.4"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.BasedOn>
                <Style TargetType="{x:Type Control}">
                    <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                    <Setter Property="FontSize" Value="12"/>
                    <Setter Property="FocusVisualStyle">
                        <Setter.Value>
                            <Style>
                                <Setter Property="Control.Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <Rectangle RadiusY="4" RadiusX="4">
                                                <Rectangle.Style>
                                                    <Style TargetType="{x:Type Rectangle}">
                                                        <Setter Property="Margin" Value="-2"/>
                                                        <Setter Property="Opacity" Value="0.6"/>
                                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                        <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                        <Setter Property="StrokeThickness" Value="2"/>
                                                        <Setter Property="StrokeDashArray" Value="1 1"/>
                                                    </Style>
                                                </Rectangle.Style>
                                            </Rectangle>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Style.BasedOn>
        </Style>
        <Style x:Key="RadioButtonStyle6" TargetType="{x:Type RadioButton}">
            <Setter Property="FocusVisualStyle">
                <Setter.Value>
                    <Style>
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="-4" Opacity="0.6" RadiusY="4" RadiusX="4" SnapsToDevicePixels="True" Stroke="{DynamicResource SecondaryBorderBrush}" StrokeThickness="2" StrokeDashArray="1 1"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="6,0,0,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="StoryboardCheckedFalse">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="StoryboardCheckedTrue">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Height="18" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="18">
                                <Ellipse x:Name="optionMark" Fill="White" MinWidth="6" MinHeight="6" RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                        </TransformGroup>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Left" Height="134" RadiusY="17" RadiusX="17" StrokeThickness="6" VerticalAlignment="Top" Width="119" Margin="-2.5,-36,-9,-66.5" Fill="White"/>
                            <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Left" Height="103.5" RadiusY="0" RadiusX="0" StrokeThickness="6" VerticalAlignment="Top" Width="107.5" Margin="0,-21.5,0,-50.5">
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="box-truck.png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasContent" Value="True">
                                <Setter Property="Visibility" TargetName="contentPresenter" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsChecked" Value="True"/>
                                    <Condition Property="IsPressed" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Opacity" Value="0.8"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsChecked" Value="False"/>
                                    <Condition Property="IsPressed" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
                            </MultiTrigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkPrimaryBrush}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.4"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.BasedOn>
                <Style TargetType="{x:Type Control}">
                    <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                    <Setter Property="FontSize" Value="12"/>
                    <Setter Property="FocusVisualStyle">
                        <Setter.Value>
                            <Style>
                                <Setter Property="Control.Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <Rectangle RadiusY="4" RadiusX="4">
                                                <Rectangle.Style>
                                                    <Style TargetType="{x:Type Rectangle}">
                                                        <Setter Property="Margin" Value="-2"/>
                                                        <Setter Property="Opacity" Value="0.6"/>
                                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                        <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                        <Setter Property="StrokeThickness" Value="2"/>
                                                        <Setter Property="StrokeDashArray" Value="1 1"/>
                                                    </Style>
                                                </Rectangle.Style>
                                            </Rectangle>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Style.BasedOn>
        </Style>
        <Style x:Key="RadioButtonStyle7" TargetType="{x:Type RadioButton}">
            <Setter Property="FocusVisualStyle">
                <Setter.Value>
                    <Style>
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="-4" Opacity="0.6" RadiusY="4" RadiusX="4" SnapsToDevicePixels="True" Stroke="{DynamicResource SecondaryBorderBrush}" StrokeThickness="2" StrokeDashArray="1 1"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="6,0,0,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="StoryboardCheckedFalse">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="StoryboardCheckedTrue">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Height="18" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="18">
                                <Ellipse x:Name="optionMark" Fill="White" MinWidth="6" MinHeight="6" RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                        </TransformGroup>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Left" Height="134" RadiusY="17" RadiusX="17" StrokeThickness="6" VerticalAlignment="Top" Width="119" Margin="-2.5,-36,-9,-66.5" Fill="White"/>
                            <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Left" Height="82.94" RadiusY="0" RadiusX="0" StrokeThickness="6" VerticalAlignment="Top" Width="92.91" Margin="10,-5.5,0,0">
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="rickshaw.png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasContent" Value="True">
                                <Setter Property="Visibility" TargetName="contentPresenter" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsChecked" Value="True"/>
                                    <Condition Property="IsPressed" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Opacity" Value="0.8"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsChecked" Value="False"/>
                                    <Condition Property="IsPressed" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
                            </MultiTrigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkPrimaryBrush}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.4"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.BasedOn>
                <Style TargetType="{x:Type Control}">
                    <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                    <Setter Property="FontSize" Value="12"/>
                    <Setter Property="FocusVisualStyle">
                        <Setter.Value>
                            <Style>
                                <Setter Property="Control.Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <Rectangle RadiusY="4" RadiusX="4">
                                                <Rectangle.Style>
                                                    <Style TargetType="{x:Type Rectangle}">
                                                        <Setter Property="Margin" Value="-2"/>
                                                        <Setter Property="Opacity" Value="0.6"/>
                                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                        <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                        <Setter Property="StrokeThickness" Value="2"/>
                                                        <Setter Property="StrokeDashArray" Value="1 1"/>
                                                    </Style>
                                                </Rectangle.Style>
                                            </Rectangle>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Style.BasedOn>
        </Style>
        <Style x:Key="RadioButtonStyle8" TargetType="{x:Type RadioButton}">
            <Setter Property="FocusVisualStyle">
                <Setter.Value>
                    <Style>
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="-4" Opacity="0.6" RadiusY="4" RadiusX="4" SnapsToDevicePixels="True" Stroke="{DynamicResource SecondaryBorderBrush}" StrokeThickness="2" StrokeDashArray="1 1"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="6,0,0,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="StoryboardCheckedFalse">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="StoryboardCheckedTrue">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Height="18" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="18">
                                <Ellipse x:Name="optionMark" Fill="White" MinWidth="6" MinHeight="6" RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                        </TransformGroup>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Left" Height="134" RadiusY="17" RadiusX="17" StrokeThickness="6" VerticalAlignment="Top" Width="119" Margin="-2.5,-36,-9,-66.5" Fill="White"/>
                            <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Left" Height="103.5" RadiusY="0" RadiusX="0" StrokeThickness="6" VerticalAlignment="Top" Width="107.5" Margin="0,-21.5,0,-50.5">
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="scooter.png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasContent" Value="True">
                                <Setter Property="Visibility" TargetName="contentPresenter" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsChecked" Value="True"/>
                                    <Condition Property="IsPressed" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Opacity" Value="0.8"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsChecked" Value="False"/>
                                    <Condition Property="IsPressed" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
                            </MultiTrigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource DarkPrimaryBrush}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.4"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.BasedOn>
                <Style TargetType="{x:Type Control}">
                    <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                    <Setter Property="FontSize" Value="12"/>
                    <Setter Property="FocusVisualStyle">
                        <Setter.Value>
                            <Style>
                                <Setter Property="Control.Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <Rectangle RadiusY="4" RadiusX="4">
                                                <Rectangle.Style>
                                                    <Style TargetType="{x:Type Rectangle}">
                                                        <Setter Property="Margin" Value="-2"/>
                                                        <Setter Property="Opacity" Value="0.6"/>
                                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                        <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                        <Setter Property="StrokeThickness" Value="2"/>
                                                        <Setter Property="StrokeDashArray" Value="1 1"/>
                                                    </Style>
                                                </Rectangle.Style>
                                            </Rectangle>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Style.BasedOn>
        </Style>
        <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Style.BasedOn>
                <Style TargetType="{x:Type Button}">
                    <Setter Property="Background" Value="{DynamicResource RegionBrush}"/>
                    <Setter Property="hc:BorderElement.CornerRadius" Value="4"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <Grid HorizontalAlignment="Left" Height="42.75" VerticalAlignment="Top" Width="146">
                                    <Rectangle Fill="White" HorizontalAlignment="Left" Height="42.75" RadiusY="17" RadiusX="17" StrokeThickness="6" VerticalAlignment="Top" Width="145.993" Margin="0"/>
                                    <TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Top"/>
                                    <Label Content="Conform " HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0" Width="145.993" FontWeight="Bold" FontSize="24" BorderBrush="{x:Null}" Background="{x:Null}" Height="42.75" FontFamily="Centaury gothic" Foreground="#FF8B00FF"/>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Content" Value="{x:Null}"/>
                                    <Trigger Property="hc:IconElement.Geometry" Value="{x:Null}"/>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.BasedOn>
                        <Style TargetType="{x:Type ButtonBase}">
                            <Setter Property="Height" Value="30"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
                            <Setter Property="Padding" Value="10,6"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="HorizontalAlignment" Value="Center"/>
                            <Setter Property="VerticalAlignment" Value="Center"/>
                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                            <Style.BasedOn>
                                <Style TargetType="{x:Type Control}">
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                    <Setter Property="FontSize" Value="12"/>
                                    <Setter Property="FocusVisualStyle">
                                        <Setter.Value>
                                            <Style>
                                                <Setter Property="Control.Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <Rectangle RadiusY="4" RadiusX="4">
                                                                <Rectangle.Style>
                                                                    <Style TargetType="{x:Type Rectangle}">
                                                                        <Setter Property="Margin" Value="-2"/>
                                                                        <Setter Property="Opacity" Value="0.6"/>
                                                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                                        <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                                        <Setter Property="StrokeThickness" Value="2"/>
                                                                        <Setter Property="StrokeDashArray" Value="1 1"/>
                                                                    </Style>
                                                                </Rectangle.Style>
                                                            </Rectangle>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Style.BasedOn>
                        </Style>
                    </Style.BasedOn>
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="0.9"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" Value="0.6"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.4"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Style.BasedOn>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{DynamicResource BorderBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ButtonStyle2" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Style.BasedOn>
                <Style TargetType="{x:Type Button}">
                    <Setter Property="Background" Value="{DynamicResource RegionBrush}"/>
                    <Setter Property="hc:BorderElement.CornerRadius" Value="4"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <Grid HorizontalAlignment="Left" Height="34.5" VerticalAlignment="Top" Width="218.5">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="109*"/>
                                        <ColumnDefinition Width="110*"/>
                                    </Grid.ColumnDefinitions>
                                    <Rectangle Fill="#FFFFC500" HorizontalAlignment="Left" Height="34.5" RadiusY="10.5" RadiusX="10.5" StrokeThickness="6" VerticalAlignment="Top" Width="218.5" Grid.ColumnSpan="2"/>
                                    <TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Top"/>
                                    <Label Content="Find location" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="22.353,-2.85,0,-3.25" BorderBrush="{x:Null}" Foreground="Black" FontWeight="Bold" FontSize="20" Grid.ColumnSpan="2" Height="40.6" Background="{x:Null}" FontFamily="Century Gothic"/>
                                    <Rectangle HorizontalAlignment="Left" Height="29" RadiusY="0" RadiusX="0" StrokeThickness="6" VerticalAlignment="Top" Width="33.25" Grid.ColumnSpan="1" Margin="59.999,2.5,0,0" Grid.Column="1">
                                        <Rectangle.Fill>
                                            <ImageBrush ImageSource="pin (1).png"/>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Content" Value="{x:Null}"/>
                                    <Trigger Property="hc:IconElement.Geometry" Value="{x:Null}"/>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.BasedOn>
                        <Style TargetType="{x:Type ButtonBase}">
                            <Setter Property="Height" Value="30"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
                            <Setter Property="Padding" Value="10,6"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="HorizontalAlignment" Value="Center"/>
                            <Setter Property="VerticalAlignment" Value="Center"/>
                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                            <Style.BasedOn>
                                <Style TargetType="{x:Type Control}">
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                    <Setter Property="FontSize" Value="12"/>
                                    <Setter Property="FocusVisualStyle">
                                        <Setter.Value>
                                            <Style>
                                                <Setter Property="Control.Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <Rectangle RadiusY="4" RadiusX="4">
                                                                <Rectangle.Style>
                                                                    <Style TargetType="{x:Type Rectangle}">
                                                                        <Setter Property="Margin" Value="-2"/>
                                                                        <Setter Property="Opacity" Value="0.6"/>
                                                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                                        <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                                        <Setter Property="StrokeThickness" Value="2"/>
                                                                        <Setter Property="StrokeDashArray" Value="1 1"/>
                                                                    </Style>
                                                                </Rectangle.Style>
                                                            </Rectangle>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Style.BasedOn>
                        </Style>
                    </Style.BasedOn>
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="0.9"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" Value="0.6"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.4"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Style.BasedOn>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{DynamicResource BorderBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ButtonStyle3" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Style.BasedOn>
                <Style TargetType="{x:Type Button}">
                    <Setter Property="Background" Value="{DynamicResource RegionBrush}"/>
                    <Setter Property="hc:BorderElement.CornerRadius" Value="4"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <Grid HorizontalAlignment="Left" Height="34.5" VerticalAlignment="Top" Width="218.5">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="109*"/>
                                        <ColumnDefinition Width="110*"/>
                                    </Grid.ColumnDefinitions>
                                    <Rectangle Fill="#FFFF9700" HorizontalAlignment="Left" Height="34.5" RadiusY="10.5" RadiusX="10.5" StrokeThickness="6" VerticalAlignment="Top" Width="218.5" Grid.ColumnSpan="2"/>
                                    <TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Top"/>
                                    <Label Content="Find location" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="22.353,-2.85,0,-3.25" BorderBrush="{x:Null}" Foreground="Black" FontWeight="Bold" FontSize="20" Grid.ColumnSpan="2" Height="40.6" Background="{x:Null}" FontFamily="Century Gothic"/>
                                    <Rectangle HorizontalAlignment="Left" Height="29" RadiusY="0" RadiusX="0" StrokeThickness="6" VerticalAlignment="Top" Width="33.25" Grid.ColumnSpan="1" Margin="59.999,2.5,0,0" Grid.Column="1">
                                        <Rectangle.Fill>
                                            <ImageBrush ImageSource="pin (1).png"/>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Content" Value="{x:Null}"/>
                                    <Trigger Property="hc:IconElement.Geometry" Value="{x:Null}"/>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.BasedOn>
                        <Style TargetType="{x:Type ButtonBase}">
                            <Setter Property="Height" Value="30"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
                            <Setter Property="Padding" Value="10,6"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="HorizontalAlignment" Value="Center"/>
                            <Setter Property="VerticalAlignment" Value="Center"/>
                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                            <Style.BasedOn>
                                <Style TargetType="{x:Type Control}">
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                    <Setter Property="FontSize" Value="12"/>
                                    <Setter Property="FocusVisualStyle">
                                        <Setter.Value>
                                            <Style>
                                                <Setter Property="Control.Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <Rectangle RadiusY="4" RadiusX="4">
                                                                <Rectangle.Style>
                                                                    <Style TargetType="{x:Type Rectangle}">
                                                                        <Setter Property="Margin" Value="-2"/>
                                                                        <Setter Property="Opacity" Value="0.6"/>
                                                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                                        <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                                        <Setter Property="StrokeThickness" Value="2"/>
                                                                        <Setter Property="StrokeDashArray" Value="1 1"/>
                                                                    </Style>
                                                                </Rectangle.Style>
                                                            </Rectangle>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Style.BasedOn>
                        </Style>
                    </Style.BasedOn>
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="0.9"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" Value="0.6"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.4"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Style.BasedOn>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{DynamicResource BorderBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ButtonStyle4" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Style.BasedOn>
                <Style TargetType="{x:Type Button}">
                    <Setter Property="Background" Value="{DynamicResource RegionBrush}"/>
                    <Setter Property="hc:BorderElement.CornerRadius" Value="4"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <Grid HorizontalAlignment="Left" Height="42.75" VerticalAlignment="Top" Width="146">
                                    <Rectangle Fill="White" HorizontalAlignment="Left" Height="42.75" RadiusY="17" RadiusX="17" StrokeThickness="6" VerticalAlignment="Top" Width="145.993" Margin="0"/>
                                    <TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Top"/>
                                    <Label Content="Booking" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0" Width="145.993" FontWeight="Bold" FontSize="24" BorderBrush="{x:Null}" Background="{x:Null}" Height="42.75" FontFamily="Centaury gothic" Foreground="#FF8B00FF"/>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Content" Value="{x:Null}"/>
                                    <Trigger Property="hc:IconElement.Geometry" Value="{x:Null}"/>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.BasedOn>
                        <Style TargetType="{x:Type ButtonBase}">
                            <Setter Property="Height" Value="30"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
                            <Setter Property="Padding" Value="10,6"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="HorizontalAlignment" Value="Center"/>
                            <Setter Property="VerticalAlignment" Value="Center"/>
                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                            <Style.BasedOn>
                                <Style TargetType="{x:Type Control}">
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                                    <Setter Property="FontSize" Value="12"/>
                                    <Setter Property="FocusVisualStyle">
                                        <Setter.Value>
                                            <Style>
                                                <Setter Property="Control.Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <Rectangle RadiusY="4" RadiusX="4">
                                                                <Rectangle.Style>
                                                                    <Style TargetType="{x:Type Rectangle}">
                                                                        <Setter Property="Margin" Value="-2"/>
                                                                        <Setter Property="Opacity" Value="0.6"/>
                                                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                                        <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
                                                                        <Setter Property="StrokeThickness" Value="2"/>
                                                                        <Setter Property="StrokeDashArray" Value="1 1"/>
                                                                    </Style>
                                                                </Rectangle.Style>
                                                            </Rectangle>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Style.BasedOn>
                        </Style>
                    </Style.BasedOn>
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="0.9"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" Value="0.6"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.4"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Style.BasedOn>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{DynamicResource BorderBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>
    <Grid>
        <Rectangle x:Name="_1" HorizontalAlignment="Left" Height="250.5" Margin="27.269,265.5,0,0" VerticalAlignment="Top" Width="770.973" RadiusY="17" RadiusX="17" StrokeThickness="6" RenderTransformOrigin="0.5,0.5" Fill="#FFFFD100">
            <Rectangle.RenderTransform>
                <TransformGroup>
                    <ScaleTransform/>
                    <SkewTransform AngleX="0.427"/>
                    <RotateTransform/>
                    <TranslateTransform X="-0.743"/>
                </TransformGroup>
            </Rectangle.RenderTransform>
        </Rectangle>
        <Rectangle x:Name="_2" HorizontalAlignment="Right" Height="256.31" Margin="0,0,28,0" RadiusY="16.5" RadiusX="16.5" VerticalAlignment="Top" Width="770.5">
            <Rectangle.Fill>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FF910CFF" Offset="0.19"/>
                    <GradientStop Color="#FF360976" Offset="0.921"/>
                </LinearGradientBrush>
            </Rectangle.Fill>
        </Rectangle>
        <hc:DateTimePicker x:Name="datapicker" HorizontalAlignment="Left" Height="34.5" Margin="290.304,403.78,0,0" VerticalAlignment="Top" Width="198.696" BorderBrush="#FF260DC5" BorderThickness="3"/>
        <RadioButton x:Name="car" Content="RadioButton" HorizontalAlignment="Left" Height="31.5" Margin="354,131.22,0,0" VerticalAlignment="Top" Width="107.5" Style="{DynamicResource RadioButtonStyle4}" RenderTransformOrigin="0.712,0.596"/>
        <RadioButton x:Name="van" Content="RadioButton" HorizontalAlignment="Left" Height="77.44" Margin="491,131.22,0,0" VerticalAlignment="Top" Width="157.5" Style="{DynamicResource RadioButtonStyle5}"/>
        <RadioButton x:Name="lorry" Content="RadioButton" HorizontalAlignment="Left" Height="77.44" Margin="627.5,131.22,0,0" VerticalAlignment="Top" Width="157.5" Style="{DynamicResource RadioButtonStyle6}" RenderTransformOrigin="1.394,0.494"/>
        <RadioButton x:Name="threwwl" Content="RadioButton" HorizontalAlignment="Left" Height="77.44" Margin="217,131.22,0,0" VerticalAlignment="Top" Width="157.5" Style="{DynamicResource RadioButtonStyle7}"/>
        <RadioButton x:Name="bike" Content="RadioButton" HorizontalAlignment="Right" Height="77.44" Margin="0,131.22,578,0" VerticalAlignment="Top" Style="{DynamicResource RadioButtonStyle8}" Width="157.5"/>
        <Label x:Name="_3" Content="Select a vehicle" HorizontalAlignment="Left" Height="60.5" Margin="232,10,0,0" VerticalAlignment="Top" Width="304.196" Background="{x:Null}" BorderBrush="{x:Null}" Foreground="White" FontWeight="Bold" FontSize="36" FontFamily="Century Gothic"/>
        <Label x:Name="_4" Content="Pick-up Location&#xA;" HorizontalAlignment="Left" Height="35" Margin="72.304,277.81,0,0" VerticalAlignment="Top" Width="157.196" Background="{x:Null}" BorderBrush="{x:Null}" Foreground="#FF0C0B0B" FontWeight="Bold" FontSize="16" FontFamily="Century Gothic"/>
        <Label x:Name="_5" Content="Drop Location&#xA;" HorizontalAlignment="Left" Height="35" Margin="298.304,277.81,0,0" VerticalAlignment="Top" Width="157.196" Background="{x:Null}" BorderBrush="{x:Null}" Foreground="#FF0C0B0B" FontWeight="Bold" FontSize="16" FontFamily="Century Gothic"/>
        <Rectangle x:Name="_6" Height="41.75" Margin="60.304,458.28,56.5,0" RadiusY="11" RadiusX="11" StrokeThickness="6" VerticalAlignment="Top" Fill="#FF5F0FC1"/>
        <hc:TextBox x:Name="pik" hc:InfoElement.Placeholder="Username" ShowClearButton="True" Margin="72.304,317.81,560.333,181.69" BorderBrush="#FF070099" BorderThickness="3"/>
        <Label x:Name="_7" Content="Confirm your request" HorizontalAlignment="Left" Height="60.5" Margin="134.804,447.243,0,0" VerticalAlignment="Top" Width="307.196" Background="{x:Null}" BorderBrush="{x:Null}" Foreground="White" FontWeight="Bold" FontSize="25" FontFamily="Century Gothic"/>
        <Button x:Name="booking" Content="Button" HorizontalAlignment="Left" Height="42.75" Margin="447,458.28,0,0" VerticalAlignment="Top" Width="147.5" Style="{DynamicResource ButtonStyle4}"/>
        <hc:TextBox x:Name="drop" hc:InfoElement.Placeholder="Username" ShowClearButton="True" Margin="290.304,317.81,333,181.69" BorderBrush="#FF070099" BorderThickness="3"/>
        <Label x:Name="_8" Content="Enter the number of km" HorizontalAlignment="Left" Height="35" Margin="60.304,368.78,0,0" VerticalAlignment="Top" Width="213" Background="{x:Null}" BorderBrush="{x:Null}" Foreground="#FF0C0B0B" FontWeight="Bold" FontSize="16" FontFamily="Century Gothic"/>
        <hc:TextBox x:Name="usern" hc:InfoElement.Placeholder="Username" ShowClearButton="True" Margin="526.5,403.78,77,95.72" BorderBrush="#FF070099" BorderThickness="3"/>
        <hc:TextBox x:Name="numofkm" hc:InfoElement.Placeholder="Username" ShowClearButton="True" Margin="72.304,403.78,560.333,95.72" BorderBrush="#FF070099" BorderThickness="3"/>
        <Label x:Name="_9" Content="Pick-up date and time&#xA;" HorizontalAlignment="Left" Height="35" Margin="290.304,366,0,0" VerticalAlignment="Top" Width="198.696" Background="{x:Null}" BorderBrush="{x:Null}" Foreground="#FF0C0B0B" FontWeight="Bold" FontSize="16" FontFamily="Century Gothic"/>
        <Button x:Name="findlocate" Content="Button" HorizontalAlignment="Left" Height="34.5" Margin="526.5,317.81,0,0" VerticalAlignment="Top" Width="218.5" Style="{DynamicResource ButtonStyle3}"/>
        <Label x:Name="_10" Content="Calculate destination&#xA;" HorizontalAlignment="Left" Height="35" Margin="526.5,277.81,0,0" VerticalAlignment="Top" Width="198.696" Background="{x:Null}" BorderBrush="{x:Null}" Foreground="#FF0C0B0B" FontWeight="Bold" FontSize="16" FontFamily="Century Gothic"/>
        <Label x:Name="_11" Content="Confirm your name&#xA;" HorizontalAlignment="Left" Height="35" Margin="526.5,366,0,0" VerticalAlignment="Top" Width="198.696" Background="{x:Null}" BorderBrush="{x:Null}" Foreground="#FF0C0B0B" FontWeight="Bold" FontSize="16" FontFamily="Century Gothic"/>

    </Grid>
</UserControl>
